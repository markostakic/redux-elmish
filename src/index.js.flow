// @flow

export type PromiseEffect<TAction> = {
  type: 'PROMISE',
  factory: () => Promise,
  successTagger: (result: any) => TAction,
  failTagger: (error: any) => TAction
};

export type NoneEffect = {
  type: 'NONE'
};

export type MappedEffect<TAction> = {
  type: 'MAP',
  effect: Effect,
  tagger: (action: any) => TAction
};

export type BatchEffect<TAction> = {
  type: 'BATCH',
  effects: Effect<TAction>[]
};

export type Effect<TAction> = PromiseEffect<TAction> | NoneEffect | MappedEffect<TAction> | BatchEffect<TAction>;

export interface Effects {
  static promise<TAction, TPromiseResult>(promiseFactory: () => Promise<TPromiseResult>, successTagger: (result: TPromiseResult) => TAction, failTagger: (error: any) => TAction): Effect<TAction>,
  static none(): NoneEffect,
  static map<TAction, TTagAction>(effect: Effect<TAction>, tagger: (action: TAction) => TTagAction): Effect<TTagAction>,
  static batch<TAction>(effects: Effect<TAction>[]): Effect<TAction>
};

export type Dispatch<TAction> = (action: TAction) => void;

declare export function forwardTo<TParentAction, TChildAction>(dispatch: Dispatch<TParentAction>, map: (childAction: TChildAction) => TParentAction): Dispatch<TChildAction>;

export type PureView<Props> = Class<React$Component<void, Props, void>>;

declare export function view<Props>(ViewComponent: (props: Props) => React$Element): PureView<Props>;
